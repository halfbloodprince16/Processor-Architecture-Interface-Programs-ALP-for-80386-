disp macro msg
mov AH,09H
lea dx,msg
int 21h
endm
.model small
.stack 100h
.data
menu db 10,13,09,"enter the
choice",10,13,"1.length",10,13,"2.reverse",10,13,"3.palindrome",10,13,"4.exit $"
msg1 db 10,13,"enter the string:-$"
msg2 db 10,13,"length is :-$"
msg3 db 10,13,"reversed string is :-$"
msg4 db 10,13,"-----string is palindrome----- $"
msg5 db 10,13,"-----string is not palindrome$-----$"
msg6 db 10,13,"-----thanks----- $"
str1 db 20,?,20 dup(0)
.code
mov ax,@data
mov ds,ax
disp msg1
mov ah,0ah
lea dx,str1
int 21h
men:
disp menu
mov ah,01h
int 21h
cmp al,31h
je length1
cmp al,32h
je reverse1
cmp al,33h
je palindrome1
jmp exit
length1 : call lengths
jmp men
reverse1 : call reverse
jmp men
palindrome1 : call palindrome
jmp men
proc lengths near
disp msg2
lea si,str1[1]
mov bl,[si]
mov cx,02h
b1:
rol bl,04h
mov dl,bl
and dl,0fh
cmp dl,09h
jbe next1
add dl,07h
next1:
add dl,30h
mov ah,02h
int 21h
dec cx
jnz b1
ret
endp
proc reverse near
disp msg3
xor cx,cx
lea si,str1[1]
mov cl,[si]
add si,cx
b2:
mov ah,02h
mov dl,[si]
int 21h
dec si
dec cx
jnz b2
ret
endp
proc palindrome near
and cx,00h
lea si,str1[1]
mov cl,[si]
add si,cx
inc si
lea di,str1[2]
dec di
b3:
inc di
dec si
mov al,[di]
cmp al,[si]
jne done
dec cx
jnz b3
disp msg4
ret
done:
disp msg5
ret
endp
exit:
disp msg6
mov ah,4ch
int 21h
end